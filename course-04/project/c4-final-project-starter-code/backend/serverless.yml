console: true
org: demellj
app: serverless-todo-app
service: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ca-central-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: demellj-9836-7150-6533-todo-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    JWKS_URL: https://demello-dev.us.auth0.com/.well-known/jwks.json

  logs:
    # Enable API Gateway logs
    restApi: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"


resources:
  Resources:
    RestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ApiGatewayRestApi
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origins: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref RestApi
    
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TODOS_TABLE}
        AttributeDefinitions:
         - AttributeName: userId
           AttributeType: S
         - AttributeName: todoId
           AttributeType: S
         - AttributeName: createdAt
           AttributeType: S
        KeySchema: # composite key
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: todoId
              KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
            KeySchema: # index composite key
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # Copy all attributes to index

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                  - '*'
              AllowedHeaders:
                  - '*'
              AllowedMethods:
                  - GET
                  - PUT
                  - POST
                  - DELETE
                  - HEAD
              MaxAge: 3000
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: 's3:ObjectCreated:*'
              Function: !GetAtt ProcessUploadedImageLambdaFunction.Arn

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref AttachmentsBucket
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
           - Sid: PublicReadForGetBucketObjects
             Effect: Allow
             Principal: '*'
             Action: 's3:GetObject'
             Resource:
               Fn::Join:
                 - '/'
                 - - !GetAtt AttachmentsBucket.Arn
                   - '*'

    ProcessUploadedImagePermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !Ref ProcessUploadedImageLambdaFunction
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        SourceAccount: !Ref AWS::AccountId
        SourceArn: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}


functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
         - dynamodb:Query  # for composite key queries
        Resource: !GetAtt TodosTable.Arn 
      - Effect: Allow
        Action:
         - dynamodb:Query  # for composite key queries
        Resource: 
          Fn::Join:
            - '/'
            - - !GetAtt TodosTable.Arn
              - 'index'
              - '${self:provider.environment.TODOS_CREATED_AT_INDEX}'

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/create-todo-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
         - dynamodb:PutItem 
        Resource: !GetAtt TodosTable.Arn

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/update-todo-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
         - dynamodb:UpdateItem 
        Resource: !GetAtt TodosTable.Arn

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
         - dynamodb:DeleteItem 
        Resource: !GetAtt TodosTable.Arn
      - Effect: Allow
        Action:
         - s3:DeleteObject 
        Resource:
          Fn::Join:
            - '/'
            - - !GetAtt AttachmentsBucket.Arn
              - '*'

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt TodosTable.Arn
      - Effect: Allow
        Action:
         - s3:PutObject 
         - s3:GetObject 
        Resource:
          Fn::Join:
            - '/'
            - - !GetAtt AttachmentsBucket.Arn
              - '*'

  ProcessUploadedImage:
    handler: src/lambda/s3/uploadComplete.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
         - s3:GetObject 
        Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
      - Effect: Allow
        Action:
         - dynamodb:UpdateItem 
        Resource: !GetAtt TodosTable.Arn

